# Inclure les dépendences nécessaires,
library(rms)
library(pROC)
library(ROCR)
library(ScottKnottESD)
library(boot)
library(car)

# Charger les données
data <- read.csv("./data/averagesWithBugs.csv")
head(data)

# Pré-traitement des données
data$isContainsBug <- ifelse(data$class_or_interface == "ContainsBug", 1, 0)
data$ContainsBug <- as.factor(data$ContainsBug)
head(data)

# Fonction pour calculer la performance AUC (Area Under Curve), Précision et Rappel
get_auc <- function(actuals, predicted) {
  predictions <- prediction(predicted, actuals)
  auc <- ROCR::performance(predictions, 'Cyclomatic')
  auc <- unlist(slot(auc, 'y.values'))
  result_auc <- min(round(auc, digits = 2))
  result_auc <- ifelse(result_auc < 0.50, 1 - result_auc, result_auc)
  return(result_auc)
}

# Précision et Rappel
error_metric <- function(actuals, predicted) {
  CM <- table(predicted, actuals)
  TN <- CM[1, 1]
  TP <- CM[2, 2]
  FN <- CM[1, 2]
  FP <- CM[2, 1]
  precision <- (TP) / (TP + FP)
  recall <- (TP) / (TP + FN)
  my_list <- list("precision" = precision, "recall" = recall)
  return(my_list)
}

# Analyse de corrélation
correlations <- varclus(~ Version + Files + CountInput + MaxNesting + Cyclomatic + ContainsBug, data = data, similarity = "spearman", trans = "abs")
plot(correlations)
abline(h = 1 - 0.7, col = "grey")

# Génération de 100 échantillons bootstrap
getBootstrapSamples <- function(dat, idx) {
  return(idx)
}

boot_indices <- boot(data, statistic = getBootstrapSamples, R = 100)$t

# Déclaration des listes pour stocker les résultats
AUC <- list()
Precision <- list()
Recall <- list()
interpretation <- list()

# Entraînement et test de 100 modèles, un modèle par échantillon
for (i in 1:100) {
  # Données pour l'entraînement du modèle
  train <- data[boot_indices[i, ], ]
  # Données pour le test du modèle
  test <- data[-boot_indices[i, ], ]

  # Entraînement du modèle
  logistic_regression_model <- lrm(ContainsBug ~ ., data = train)

  actuals <- test$ContainsBug
  test$ContainsBug <- NULL

  # Prédiction des données de test
  predicted <- predict(logistic_regression_model, newdata = test, type = 'fitted.ind')

  # Calcul de la performance du modèle
  AUC[[i]] <- get_auc(actuals, predicted)
  predicted_values <- ifelse(predicted > 0.5, 1, 0)
  Precision[[i]] <- error_metric(actuals, predicted_values)[[1]]
  Recall[[i]] <- error_metric(actuals, predicted_values)[[2]]

  # Variables les plus importantes
  interpretation[[i]] <- anova(logistic_regression_model)[, 1][-length(anova(logistic_regression_model)[, 1])]
}

AUC <- do.call(rbind, lapply(AUC, function(x) x))
Precision <- do.call(rbind, lapply(Precision, function(x) x))
Recall <- do.call(rbind, lapply(Recall, function(x) x))
interpretation <- do.call(rbind, lapply(interpretation, function(x) x))

# Résumé des résultats
summary(AUC)
summary(Precision)
summary(Recall)

# Scott-knott : identification des variables les plus importantes
sk_esd(interpretation)$groups

# Nomogramme : identification de l'impact de chaque variable
dd <- datadist(data)
options(datadist = 'dd')

model <- lrm(ContainsBug ~ ., data = data, x = TRUE, y = TRUE)
boot_model <- bootcov(model, B = 100, pr = TRUE, maxit = 1000)

eclipse_nomogram <- nomogram(boot_model, fun = function(x) 1 / (1 + exp(-x)),
                             fun.at = c(.001, seq(.1, .9, by = .5), .999),
                             lp = FALSE,
                             funlabel = "DefectProbability",
                             abbrev = TRUE)

plot(eclipse_nomogram, xfrac = .30, cex.var = 1.0, cex.axis = 0.7, main = "What makes a file defective?")

# Comparaison du modèle avec et sans analyse de corrélation

